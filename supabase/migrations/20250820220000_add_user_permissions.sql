-- 1. Create user_permissions table
CREATE TABLE public.user_permissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    resource TEXT NOT NULL,
    actions TEXT[] NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, resource)
);

COMMENT ON TABLE public.user_permissions IS 'Stores granular permissions for individual users, overriding role-based permissions.';
COMMENT ON COLUMN public.user_permissions.resource IS 'The resource the permission applies to (e.g., ''invoices'', ''clients'').';
COMMENT ON COLUMN public.user_permissions.actions IS 'The actions the user can perform on the resource (e.g., ''{create, read, update, delete}'').';

-- 2. Enable RLS
ALTER TABLE public.user_permissions ENABLE ROW LEVEL SECURITY;

-- 3. Create RLS policies
CREATE POLICY "Users can view their own permissions"
ON public.user_permissions
FOR SELECT
USING (auth.uid() = user_id);

-- Note: The policy below assumes you have an is_admin() function. 
-- If not, replace public.is_admin() with your own logic to identify admin users.
-- For example: `EXISTS (SELECT 1 FROM users WHERE auth_id = auth.uid() AND role = 'admin')`
CREATE POLICY "Admins can manage all user permissions"
ON public.user_permissions
FOR ALL
USING (public.is_admin());

-- 4. Create RPC function to get user permissions
CREATE OR REPLACE FUNCTION public.get_user_permissions()
RETURNS TABLE(resource TEXT, actions TEXT[])
LANGUAGE sql
SECURITY DEFINER
AS $$
    SELECT
        resource,
        actions
    FROM
        public.user_permissions
    WHERE
        user_id = auth.uid();
$$;

-- Grant execute permission to the function
GRANT EXECUTE ON FUNCTION public.get_user_permissions() TO authenticated;
