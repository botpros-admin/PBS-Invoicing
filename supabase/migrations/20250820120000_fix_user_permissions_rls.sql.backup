-- ==========================================
-- Fix User Permissions and RLS Policies
-- Date: 2025-08-20
-- Purpose: Implement proper role-based access control
-- ==========================================

-- First, ensure we have the roles table and proper user roles
CREATE TABLE IF NOT EXISTS roles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT UNIQUE NOT NULL,
  description TEXT,
  permissions JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Insert default roles if they don't exist
INSERT INTO roles (name, description, permissions)
VALUES 
  ('superadmin', 'Super Administrator - Full system access', 
   '{"invoices": ["view_all", "create", "update", "delete"], "payments": ["view_all", "create", "update", "delete"], "clients": ["view_all", "create", "update", "delete"], "settings": ["view_all", "update"], "reports": ["view_all"], "users": ["view_all", "create", "update", "delete"]}'),
  ('admin', 'Administrator - Organization-wide access',
   '{"invoices": ["view_all", "create", "update"], "payments": ["view_all", "create", "update"], "clients": ["view_all", "create", "update"], "settings": ["view", "update"], "reports": ["view_all"], "users": ["view", "create", "update"]}'),
  ('billing', 'Billing Staff - Invoice and payment management',
   '{"invoices": ["view", "create", "update"], "payments": ["view", "create", "update"], "clients": ["view"], "reports": ["view_billing"]}'),
  ('claims', 'Claims Staff - View and process claims',
   '{"invoices": ["view"], "payments": ["view"], "clients": ["view"], "reports": ["view_claims"]}'),
  ('client', 'External Client - Limited portal access',
   '{"invoices": ["view_own"], "payments": ["view_own", "create_own"], "reports": ["view_own"]}')
ON CONFLICT (name) DO UPDATE
SET permissions = EXCLUDED.permissions,
    description = EXCLUDED.description;

-- Add role_id column to users table if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'users' AND column_name = 'role_id'
  ) THEN
    ALTER TABLE users ADD COLUMN role_id UUID REFERENCES roles(id);
  END IF;
END $$;

-- Add role_id column to client_users table if it doesn't exist
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM information_schema.tables WHERE table_name = 'client_users'
  ) THEN
    IF NOT EXISTS (
      SELECT 1 FROM information_schema.columns 
      WHERE table_name = 'client_users' AND column_name = 'role_id'
    ) THEN
      ALTER TABLE client_users ADD COLUMN role_id UUID REFERENCES roles(id);
    END IF;
  END IF;
END $$;

-- Update existing users with appropriate roles based on their current role field
UPDATE users u
SET role_id = r.id
FROM roles r
WHERE LOWER(u.role) = r.name
AND u.role_id IS NULL;

-- Update client_users to have client role
UPDATE client_users cu
SET role_id = r.id
FROM roles r
WHERE r.name = 'client'
AND cu.role_id IS NULL;

-- ==========================================
-- HELPER FUNCTIONS FOR RLS
-- ==========================================

-- Get current user's role name
CREATE OR REPLACE FUNCTION get_user_role_name()
RETURNS TEXT AS $$
DECLARE
  role_name TEXT;
BEGIN
  -- First check users table
  SELECT r.name INTO role_name
  FROM users u
  JOIN roles r ON u.role_id = r.id
  WHERE u.auth_id = auth.uid();
  
  IF role_name IS NOT NULL THEN
    RETURN role_name;
  END IF;
  
  -- Then check client_users table
  SELECT r.name INTO role_name
  FROM client_users cu
  JOIN roles r ON cu.role_id = r.id
  WHERE cu.auth_id = auth.uid();
  
  RETURN COALESCE(role_name, 'none');
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Get current user's organization ID
CREATE OR REPLACE FUNCTION get_user_organization_id()
RETURNS UUID AS $$
DECLARE
  org_id UUID;
BEGIN
  -- Check users table first
  SELECT organization_id INTO org_id
  FROM users
  WHERE auth_id = auth.uid();
  
  IF org_id IS NOT NULL THEN
    RETURN org_id;
  END IF;
  
  -- Check client_users table
  SELECT c.organization_id INTO org_id
  FROM client_users cu
  JOIN clients c ON cu.client_id = c.id
  WHERE cu.auth_id = auth.uid();
  
  RETURN org_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Get current user's client ID (for client users)
CREATE OR REPLACE FUNCTION get_user_client_id()
RETURNS UUID AS $$
BEGIN
  RETURN (
    SELECT client_id
    FROM client_users
    WHERE auth_id = auth.uid()
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Check if user has specific permission
CREATE OR REPLACE FUNCTION user_has_permission(permission_path TEXT)
RETURNS BOOLEAN AS $$
DECLARE
  user_permissions JSONB;
  path_parts TEXT[];
  current_value JSONB;
BEGIN
  -- Get user's permissions from role
  SELECT r.permissions INTO user_permissions
  FROM users u
  JOIN roles r ON u.role_id = r.id
  WHERE u.auth_id = auth.uid();
  
  IF user_permissions IS NULL THEN
    -- Check client_users
    SELECT r.permissions INTO user_permissions
    FROM client_users cu
    JOIN roles r ON cu.role_id = r.id
    WHERE cu.auth_id = auth.uid();
  END IF;
  
  IF user_permissions IS NULL THEN
    RETURN FALSE;
  END IF;
  
  -- Parse permission path (e.g., 'invoices.view_all')
  path_parts := string_to_array(permission_path, '.');
  
  -- Navigate through the JSON structure
  current_value := user_permissions;
  FOR i IN 1..array_length(path_parts, 1) - 1 LOOP
    current_value := current_value -> path_parts[i];
    IF current_value IS NULL THEN
      RETURN FALSE;
    END IF;
  END LOOP;
  
  -- Check if the final permission exists in the array
  RETURN current_value ? path_parts[array_length(path_parts, 1)];
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ==========================================
-- DISABLE EMERGENCY POLICIES
-- ==========================================

-- Drop all emergency "allow all authenticated" policies
DROP POLICY IF EXISTS "Authenticated users can view invoices" ON invoices;
DROP POLICY IF EXISTS "Authenticated users can manage invoices" ON invoices;
DROP POLICY IF EXISTS "Authenticated users can view clients" ON clients;
DROP POLICY IF EXISTS "Authenticated users can manage clients" ON clients;
DROP POLICY IF EXISTS "Authenticated users can view invoice items" ON invoice_items;
DROP POLICY IF EXISTS "Authenticated users can manage invoice items" ON invoice_items;
DROP POLICY IF EXISTS "Authenticated users can view payments" ON payments;
DROP POLICY IF EXISTS "Authenticated users can manage payments" ON payments;
DROP POLICY IF EXISTS "Authenticated users can view payment allocations" ON payment_allocations;
DROP POLICY IF EXISTS "Authenticated users can manage payment allocations" ON payment_allocations;
DROP POLICY IF EXISTS "Authenticated users can view account credits" ON account_credits;
DROP POLICY IF EXISTS "Authenticated users can manage account credits" ON account_credits;
DROP POLICY IF EXISTS "Authenticated users can view audit logs" ON audit_logs;
DROP POLICY IF EXISTS "System can create audit logs" ON audit_logs;
DROP POLICY IF EXISTS "Authenticated users can view cpt codes" ON cpt_codes;

-- ==========================================
-- INVOICES RLS POLICIES
-- ==========================================

-- Enable RLS
ALTER TABLE invoices ENABLE ROW LEVEL SECURITY;

-- View invoices policy
CREATE POLICY "invoices_select_policy" ON invoices
FOR SELECT USING (
  CASE 
    -- Superadmin and admin can see all invoices in their organization
    WHEN get_user_role_name() IN ('superadmin', 'admin') THEN
      organization_id = get_user_organization_id()
    -- Billing and claims staff can see invoices in their organization
    WHEN get_user_role_name() IN ('billing', 'claims') THEN
      organization_id = get_user_organization_id()
    -- Clients can only see their own invoices
    WHEN get_user_role_name() = 'client' THEN
      client_id = get_user_client_id()
    ELSE FALSE
  END
);

-- Create invoices policy
CREATE POLICY "invoices_insert_policy" ON invoices
FOR INSERT WITH CHECK (
  -- Only superadmin, admin, and billing can create invoices
  get_user_role_name() IN ('superadmin', 'admin', 'billing')
  AND organization_id = get_user_organization_id()
);

-- Update invoices policy
CREATE POLICY "invoices_update_policy" ON invoices
FOR UPDATE USING (
  -- Superadmin, admin, and billing can update invoices in their organization
  get_user_role_name() IN ('superadmin', 'admin', 'billing')
  AND organization_id = get_user_organization_id()
);

-- Delete invoices policy
CREATE POLICY "invoices_delete_policy" ON invoices
FOR DELETE USING (
  -- Only superadmin and admin can delete invoices
  get_user_role_name() IN ('superadmin', 'admin')
  AND organization_id = get_user_organization_id()
);

-- ==========================================
-- CLIENTS RLS POLICIES
-- ==========================================

ALTER TABLE clients ENABLE ROW LEVEL SECURITY;

-- View clients policy
CREATE POLICY "clients_select_policy" ON clients
FOR SELECT USING (
  CASE
    -- Staff can see all clients in their organization
    WHEN get_user_role_name() IN ('superadmin', 'admin', 'billing', 'claims') THEN
      organization_id = get_user_organization_id()
    -- Client users can only see their own client record
    WHEN get_user_role_name() = 'client' THEN
      id = get_user_client_id()
    ELSE FALSE
  END
);

-- Create clients policy
CREATE POLICY "clients_insert_policy" ON clients
FOR INSERT WITH CHECK (
  get_user_role_name() IN ('superadmin', 'admin')
  AND organization_id = get_user_organization_id()
);

-- Update clients policy
CREATE POLICY "clients_update_policy" ON clients
FOR UPDATE USING (
  get_user_role_name() IN ('superadmin', 'admin')
  AND organization_id = get_user_organization_id()
);

-- Delete clients policy
CREATE POLICY "clients_delete_policy" ON clients
FOR DELETE USING (
  get_user_role_name() IN ('superadmin', 'admin')
  AND organization_id = get_user_organization_id()
);

-- ==========================================
-- PAYMENTS RLS POLICIES
-- ==========================================

ALTER TABLE payments ENABLE ROW LEVEL SECURITY;

-- View payments policy
CREATE POLICY "payments_select_policy" ON payments
FOR SELECT USING (
  CASE
    -- Staff can see all payments in their organization
    WHEN get_user_role_name() IN ('superadmin', 'admin', 'billing', 'claims') THEN
      organization_id = get_user_organization_id()
    -- Clients can see payments for their invoices
    WHEN get_user_role_name() = 'client' THEN
      invoice_id IN (
        SELECT id FROM invoices WHERE client_id = get_user_client_id()
      )
    ELSE FALSE
  END
);

-- Create payments policy
CREATE POLICY "payments_insert_policy" ON payments
FOR INSERT WITH CHECK (
  CASE
    -- Staff can create payments for their organization
    WHEN get_user_role_name() IN ('superadmin', 'admin', 'billing') THEN
      organization_id = get_user_organization_id()
    -- Clients can create payments for their own invoices
    WHEN get_user_role_name() = 'client' THEN
      invoice_id IN (
        SELECT id FROM invoices WHERE client_id = get_user_client_id()
      )
    ELSE FALSE
  END
);

-- Update payments policy
CREATE POLICY "payments_update_policy" ON payments
FOR UPDATE USING (
  get_user_role_name() IN ('superadmin', 'admin', 'billing')
  AND organization_id = get_user_organization_id()
);

-- Delete payments policy
CREATE POLICY "payments_delete_policy" ON payments
FOR DELETE USING (
  get_user_role_name() IN ('superadmin', 'admin')
  AND organization_id = get_user_organization_id()
);

-- ==========================================
-- USERS TABLE RLS POLICIES
-- ==========================================

ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- View users policy
CREATE POLICY "users_select_policy" ON users
FOR SELECT USING (
  CASE
    -- Users can see themselves
    WHEN auth_id = auth.uid() THEN TRUE
    -- Superadmin and admin can see all users in their organization
    WHEN get_user_role_name() IN ('superadmin', 'admin') THEN
      organization_id = get_user_organization_id()
    -- Others can see limited user info in their organization
    WHEN get_user_role_name() IN ('billing', 'claims') THEN
      organization_id = get_user_organization_id()
    ELSE FALSE
  END
);

-- Update users policy (users can update their own profile)
CREATE POLICY "users_update_self_policy" ON users
FOR UPDATE USING (
  auth_id = auth.uid()
) WITH CHECK (
  auth_id = auth.uid()
  -- Prevent users from changing their own role
  AND role_id = (SELECT role_id FROM users WHERE auth_id = auth.uid())
);

-- Admin update users policy
CREATE POLICY "users_update_admin_policy" ON users
FOR UPDATE USING (
  get_user_role_name() IN ('superadmin', 'admin')
  AND organization_id = get_user_organization_id()
);

-- ==========================================
-- CLIENT_USERS TABLE RLS POLICIES
-- ==========================================

DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'client_users') THEN
    ALTER TABLE client_users ENABLE ROW LEVEL SECURITY;
    
    -- View client_users policy
    CREATE POLICY "client_users_select_policy" ON client_users
    FOR SELECT USING (
      CASE
        -- Client users can see themselves
        WHEN auth_id = auth.uid() THEN TRUE
        -- Staff can see client users in their organization
        WHEN get_user_role_name() IN ('superadmin', 'admin', 'billing') THEN
          client_id IN (
            SELECT id FROM clients WHERE organization_id = get_user_organization_id()
          )
        ELSE FALSE
      END
    );
    
    -- Update client_users policy
    CREATE POLICY "client_users_update_self_policy" ON client_users
    FOR UPDATE USING (
      auth_id = auth.uid()
    ) WITH CHECK (
      auth_id = auth.uid()
      AND role_id = (SELECT role_id FROM client_users WHERE auth_id = auth.uid())
    );
  END IF;
END $$;

-- ==========================================
-- CPT_CODES RLS POLICIES (Reference data)
-- ==========================================

ALTER TABLE cpt_codes ENABLE ROW LEVEL SECURITY;

-- All authenticated users can view CPT codes
CREATE POLICY "cpt_codes_select_policy" ON cpt_codes
FOR SELECT USING (auth.uid() IS NOT NULL);

-- Only superadmin can modify CPT codes
CREATE POLICY "cpt_codes_modify_policy" ON cpt_codes
FOR ALL USING (get_user_role_name() = 'superadmin');

-- ==========================================
-- VERIFY AND LOG
-- ==========================================

DO $$
DECLARE
  policy_count INTEGER;
BEGIN
  SELECT COUNT(*) INTO policy_count
  FROM pg_policies
  WHERE schemaname = 'public';
  
  RAISE NOTICE 'RLS policies created successfully. Total policies: %', policy_count;
  RAISE NOTICE 'Role-based access control is now active.';
  RAISE NOTICE 'Users must have proper roles assigned to access data.';
END $$;