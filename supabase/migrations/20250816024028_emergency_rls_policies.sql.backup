-- EMERGENCY: Create basic RLS policies for authentication and data isolation
-- These policies prevent unauthorized data access
-- Date: 2025-08-16
-- Severity: CRITICAL

-- Drop existing policies if they exist (to avoid conflicts)
DROP POLICY IF EXISTS "Users can view own invoices" ON invoices;
DROP POLICY IF EXISTS "Users can create own invoices" ON invoices;
DROP POLICY IF EXISTS "Users can update own invoices" ON invoices;
DROP POLICY IF EXISTS "Users can delete own invoices" ON invoices;

-- INVOICES: Users can only access their own invoices
CREATE POLICY "Users can view own invoices" ON invoices
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create own invoices" ON invoices
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own invoices" ON invoices
    FOR UPDATE USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own invoices" ON invoices
    FOR DELETE USING (auth.uid() = user_id);

-- CLIENTS: Users can only access their own clients
DROP POLICY IF EXISTS "Users can view own clients" ON clients;
DROP POLICY IF EXISTS "Users can create own clients" ON clients;
DROP POLICY IF EXISTS "Users can update own clients" ON clients;

CREATE POLICY "Users can view own clients" ON clients
    FOR SELECT USING (
        auth.uid() IN (
            SELECT user_id FROM invoices WHERE client_id = clients.id
            UNION
            SELECT created_by FROM clients WHERE id = clients.id
        )
    );

CREATE POLICY "Users can create own clients" ON clients
    FOR INSERT WITH CHECK (auth.uid() = created_by);

CREATE POLICY "Users can update own clients" ON clients
    FOR UPDATE USING (auth.uid() = created_by)
    WITH CHECK (auth.uid() = created_by);

-- INVOICE LINE ITEMS: Access through invoice ownership
DROP POLICY IF EXISTS "Users can view invoice line items" ON invoice_line_items;
DROP POLICY IF EXISTS "Users can manage invoice line items" ON invoice_line_items;

CREATE POLICY "Users can view invoice line items" ON invoice_line_items
    FOR SELECT USING (
        invoice_id IN (
            SELECT id FROM invoices WHERE user_id = auth.uid()
        )
    );

CREATE POLICY "Users can manage invoice line items" ON invoice_line_items
    FOR ALL USING (
        invoice_id IN (
            SELECT id FROM invoices WHERE user_id = auth.uid()
        )
    );

-- PAYMENTS: Users can only access payments for their clients
DROP POLICY IF EXISTS "Users can view own payments" ON payments;
DROP POLICY IF EXISTS "Users can create own payments" ON payments;
DROP POLICY IF EXISTS "Users can update own payments" ON payments;

CREATE POLICY "Users can view own payments" ON payments
    FOR SELECT USING (
        client_id IN (
            SELECT id FROM clients WHERE created_by = auth.uid()
        ) OR
        created_by = auth.uid()
    );

CREATE POLICY "Users can create own payments" ON payments
    FOR INSERT WITH CHECK (auth.uid() = created_by);

CREATE POLICY "Users can update own payments" ON payments
    FOR UPDATE USING (auth.uid() = created_by)
    WITH CHECK (auth.uid() = created_by);

-- PAYMENT ALLOCATIONS: Access through payment ownership
DROP POLICY IF EXISTS "Users can view payment allocations" ON payment_allocations;
DROP POLICY IF EXISTS "Users can manage payment allocations" ON payment_allocations;

CREATE POLICY "Users can view payment allocations" ON payment_allocations
    FOR SELECT USING (
        payment_id IN (
            SELECT id FROM payments WHERE created_by = auth.uid()
        )
    );

CREATE POLICY "Users can manage payment allocations" ON payment_allocations
    FOR ALL USING (
        payment_id IN (
            SELECT id FROM payments WHERE created_by = auth.uid()
        )
    );

-- AUDIT LOGS: Users can only view their own audit logs
DROP POLICY IF EXISTS "Users can view own audit logs" ON audit_logs;

CREATE POLICY "Users can view own audit logs" ON audit_logs
    FOR SELECT USING (auth.uid() = user_id);

-- System can always create audit logs
CREATE POLICY "System can create audit logs" ON audit_logs
    FOR INSERT WITH CHECK (true);

-- CLAIMS: Access through invoice ownership
DROP POLICY IF EXISTS "Users can view claims" ON claims;
DROP POLICY IF EXISTS "Users can manage claims" ON claims;

CREATE POLICY "Users can view claims" ON claims
    FOR SELECT USING (
        invoice_id IN (
            SELECT id FROM invoices WHERE user_id = auth.uid()
        )
    );

CREATE POLICY "Users can manage claims" ON claims
    FOR ALL USING (
        invoice_id IN (
            SELECT id FROM invoices WHERE user_id = auth.uid()
        )
    );

-- INSURANCE PAYERS: All authenticated users can view (reference data)
DROP POLICY IF EXISTS "All users can view insurance payers" ON insurance_payers;
DROP POLICY IF EXISTS "Admins can manage insurance payers" ON insurance_payers;

CREATE POLICY "All users can view insurance payers" ON insurance_payers
    FOR SELECT USING (auth.uid() IS NOT NULL);

-- Only admins can manage insurance payers
CREATE POLICY "Admins can manage insurance payers" ON insurance_payers
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = auth.uid() 
            AND role = 'admin'
        )
    );

-- CPT CODES: All authenticated users can view (reference data)
DROP POLICY IF EXISTS "All users can view cpt codes" ON cpt_codes;

CREATE POLICY "All users can view cpt codes" ON cpt_codes
    FOR SELECT USING (auth.uid() IS NOT NULL);

-- CLIENT CPT MAPPINGS: Access through client ownership
DROP POLICY IF EXISTS "Users can view client cpt mappings" ON client_cpt_mappings;
DROP POLICY IF EXISTS "Users can manage client cpt mappings" ON client_cpt_mappings;

CREATE POLICY "Users can view client cpt mappings" ON client_cpt_mappings
    FOR SELECT USING (
        client_id IN (
            SELECT id FROM clients WHERE created_by = auth.uid()
        )
    );

CREATE POLICY "Users can manage client cpt mappings" ON client_cpt_mappings
    FOR ALL USING (
        client_id IN (
            SELECT id FROM clients WHERE created_by = auth.uid()
        )
    );

-- ACCOUNT CREDITS: Access through client ownership
DROP POLICY IF EXISTS "Users can view account credits" ON account_credits;
DROP POLICY IF EXISTS "Users can manage account credits" ON account_credits;

CREATE POLICY "Users can view account credits" ON account_credits
    FOR SELECT USING (
        client_id IN (
            SELECT id FROM clients WHERE created_by = auth.uid()
        )
    );

CREATE POLICY "Users can manage account credits" ON account_credits
    FOR ALL USING (
        client_id IN (
            SELECT id FROM clients WHERE created_by = auth.uid()
        )
    );

-- INVOICE STATUS HISTORY: Access through invoice ownership
DROP POLICY IF EXISTS "Users can view invoice status history" ON invoice_status_history;

CREATE POLICY "Users can view invoice status history" ON invoice_status_history
    FOR SELECT USING (
        invoice_id IN (
            SELECT id FROM invoices WHERE user_id = auth.uid()
        )
    );

-- USERS: Users can view and update their own profile
DROP POLICY IF EXISTS "Users can view own profile" ON users;
DROP POLICY IF EXISTS "Users can update own profile" ON users;

CREATE POLICY "Users can view own profile" ON users
    FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON users
    FOR UPDATE USING (auth.uid() = id)
    WITH CHECK (auth.uid() = id);

-- Create a function to check if user is admin
CREATE OR REPLACE FUNCTION is_admin()
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM users 
        WHERE id = auth.uid() 
        AND role = 'admin'
        AND is_active = true
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create bypass policies for admins on critical tables
CREATE POLICY "Admins have full access to invoices" ON invoices
    FOR ALL USING (is_admin());

CREATE POLICY "Admins have full access to clients" ON clients
    FOR ALL USING (is_admin());

CREATE POLICY "Admins have full access to payments" ON payments
    FOR ALL USING (is_admin());

CREATE POLICY "Admins have full access to users" ON users
    FOR ALL USING (is_admin());

-- Log successful policy creation
DO $$
BEGIN
    RAISE NOTICE 'RLS policies created successfully. Data is now protected with user-based isolation.';
    RAISE NOTICE 'Admin users have bypass privileges for system management.';
END $$;