-- ==========================================
-- Fix RLS Policies - Final Version
-- Date: 2025-08-20
-- Purpose: Apply proper multi-tenant RLS with correct type handling
-- ==========================================

-- First, clean up all old policies
DO $$
DECLARE
  policy_rec RECORD;
BEGIN
  -- Drop all existing policies on key tables
  FOR policy_rec IN 
    SELECT policyname, tablename 
    FROM pg_policies 
    WHERE schemaname = 'public' 
    AND tablename IN ('users', 'client_users', 'invoices', 'clients', 'payments', 'invoice_items', 'payment_allocations', 'account_credits', 'cpt_codes', 'audit_logs')
  LOOP
    EXECUTE format('DROP POLICY IF EXISTS %I ON %I', policy_rec.policyname, policy_rec.tablename);
  END LOOP;
END $$;

-- ==========================================
-- SIMPLIFIED HELPER FUNCTIONS
-- ==========================================

-- Get current user's organization ID
CREATE OR REPLACE FUNCTION get_auth_organization_id()
RETURNS UUID AS $$
DECLARE
  org_id UUID;
BEGIN
  -- Check users table first - handle both id and auth_id columns
  BEGIN
    -- Try with auth_id column first
    SELECT organization_id INTO org_id
    FROM users
    WHERE auth_id::text = auth.uid()::text;
  EXCEPTION
    WHEN undefined_column THEN
      -- Fall back to id column
      SELECT organization_id INTO org_id
      FROM users
      WHERE id::text = auth.uid()::text;
  END;
  
  IF org_id IS NOT NULL THEN
    RETURN org_id;
  END IF;
  
  -- Check client_users table
  SELECT c.organization_id INTO org_id
  FROM client_users cu
  JOIN clients c ON cu.client_id = c.id
  WHERE cu.auth_id::text = auth.uid()::text
     OR cu.user_id::text = auth.uid()::text;
  
  RETURN org_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Get current user's role
CREATE OR REPLACE FUNCTION get_auth_user_role()
RETURNS TEXT AS $$
DECLARE
  user_role TEXT;
BEGIN
  -- Try to get role from users table
  BEGIN
    SELECT role INTO user_role
    FROM users
    WHERE auth_id::text = auth.uid()::text;
  EXCEPTION
    WHEN undefined_column THEN
      SELECT role INTO user_role
      FROM users
      WHERE id::text = auth.uid()::text;
  END;
  
  IF user_role IS NOT NULL THEN
    RETURN user_role;
  END IF;
  
  -- Check if it's a client user
  IF EXISTS (
    SELECT 1 FROM client_users 
    WHERE auth_id::text = auth.uid()::text 
       OR user_id::text = auth.uid()::text
  ) THEN
    RETURN 'client';
  END IF;
  
  RETURN NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Check if current user is a client
CREATE OR REPLACE FUNCTION is_client_portal_user()
RETURNS BOOLEAN AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 
    FROM client_users 
    WHERE auth_id::text = auth.uid()::text
       OR user_id::text = auth.uid()::text
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Get current user's client ID
CREATE OR REPLACE FUNCTION get_auth_client_id()
RETURNS UUID AS $$
BEGIN
  RETURN (
    SELECT client_id 
    FROM client_users 
    WHERE auth_id::text = auth.uid()::text
       OR user_id::text = auth.uid()::text
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- ==========================================
-- USERS TABLE RLS
-- ==========================================

ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- Users can see themselves
CREATE POLICY "users_select_self" ON users
FOR SELECT USING (
  auth_id::text = auth.uid()::text 
  OR id::text = auth.uid()::text
);

-- Users can see others in their organization
CREATE POLICY "users_select_org" ON users
FOR SELECT USING (
  organization_id = get_auth_organization_id()
  AND get_auth_organization_id() IS NOT NULL
);

-- Users can update themselves
CREATE POLICY "users_update_self" ON users
FOR UPDATE USING (
  auth_id::text = auth.uid()::text 
  OR id::text = auth.uid()::text
)
WITH CHECK (
  (auth_id::text = auth.uid()::text OR id::text = auth.uid()::text)
  AND organization_id = get_auth_organization_id()
);

-- Admins can manage users
CREATE POLICY "users_admin_all" ON users
FOR ALL USING (
  get_auth_user_role() IN ('superadmin', 'admin')
  AND organization_id = get_auth_organization_id()
);

-- ==========================================
-- CLIENT_USERS TABLE RLS
-- ==========================================

DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'client_users') THEN
    ALTER TABLE client_users ENABLE ROW LEVEL SECURITY;
    
    -- Client users see themselves
    EXECUTE 'CREATE POLICY "client_users_select_self" ON client_users
    FOR SELECT USING (
      auth_id::text = auth.uid()::text 
      OR user_id::text = auth.uid()::text
    )';
    
    -- Staff see client users in their org
    EXECUTE 'CREATE POLICY "client_users_select_staff" ON client_users
    FOR SELECT USING (
      NOT is_client_portal_user()
      AND client_id IN (
        SELECT id FROM clients WHERE organization_id = get_auth_organization_id()
      )
    )';
    
    -- Client users update themselves
    EXECUTE 'CREATE POLICY "client_users_update_self" ON client_users
    FOR UPDATE USING (
      auth_id::text = auth.uid()::text 
      OR user_id::text = auth.uid()::text
    )
    WITH CHECK (
      auth_id::text = auth.uid()::text 
      OR user_id::text = auth.uid()::text
    )';
  END IF;
END $$;

-- ==========================================
-- INVOICES RLS
-- ==========================================

ALTER TABLE invoices ENABLE ROW LEVEL SECURITY;

-- Staff see all invoices in their org
CREATE POLICY "invoices_select_staff" ON invoices
FOR SELECT USING (
  NOT is_client_portal_user()
  AND organization_id = get_auth_organization_id()
);

-- Clients see their invoices
CREATE POLICY "invoices_select_client" ON invoices
FOR SELECT USING (
  is_client_portal_user()
  AND client_id = get_auth_client_id()
);

-- Staff create invoices
CREATE POLICY "invoices_insert_staff" ON invoices
FOR INSERT WITH CHECK (
  NOT is_client_portal_user()
  AND get_auth_user_role() IN ('superadmin', 'admin', 'billing')
  AND organization_id = get_auth_organization_id()
);

-- Staff update invoices
CREATE POLICY "invoices_update_staff" ON invoices
FOR UPDATE USING (
  NOT is_client_portal_user()
  AND get_auth_user_role() IN ('superadmin', 'admin', 'billing')
  AND organization_id = get_auth_organization_id()
);

-- Admins delete invoices
CREATE POLICY "invoices_delete_admin" ON invoices
FOR DELETE USING (
  get_auth_user_role() IN ('superadmin', 'admin')
  AND organization_id = get_auth_organization_id()
);

-- ==========================================
-- CLIENTS RLS
-- ==========================================

ALTER TABLE clients ENABLE ROW LEVEL SECURITY;

-- Staff see all clients in their org
CREATE POLICY "clients_select_staff" ON clients
FOR SELECT USING (
  NOT is_client_portal_user()
  AND organization_id = get_auth_organization_id()
);

-- Clients see themselves
CREATE POLICY "clients_select_self" ON clients
FOR SELECT USING (
  is_client_portal_user()
  AND id = get_auth_client_id()
);

-- Admins create clients
CREATE POLICY "clients_insert_admin" ON clients
FOR INSERT WITH CHECK (
  get_auth_user_role() IN ('superadmin', 'admin')
  AND organization_id = get_auth_organization_id()
);

-- Admins update clients
CREATE POLICY "clients_update_admin" ON clients
FOR UPDATE USING (
  get_auth_user_role() IN ('superadmin', 'admin')
  AND organization_id = get_auth_organization_id()
);

-- Superadmins delete clients
CREATE POLICY "clients_delete_superadmin" ON clients
FOR DELETE USING (
  get_auth_user_role() = 'superadmin'
  AND organization_id = get_auth_organization_id()
);

-- ==========================================
-- PAYMENTS RLS
-- ==========================================

ALTER TABLE payments ENABLE ROW LEVEL SECURITY;

-- Staff see all payments in their org
CREATE POLICY "payments_select_staff" ON payments
FOR SELECT USING (
  NOT is_client_portal_user()
  AND organization_id = get_auth_organization_id()
);

-- Clients see payments for their invoices
CREATE POLICY "payments_select_client" ON payments
FOR SELECT USING (
  is_client_portal_user()
  AND invoice_id IN (
    SELECT id FROM invoices WHERE client_id = get_auth_client_id()
  )
);

-- Staff create payments
CREATE POLICY "payments_insert_staff" ON payments
FOR INSERT WITH CHECK (
  NOT is_client_portal_user()
  AND get_auth_user_role() IN ('superadmin', 'admin', 'billing')
  AND organization_id = get_auth_organization_id()
);

-- Clients create payments (online)
CREATE POLICY "payments_insert_client" ON payments
FOR INSERT WITH CHECK (
  is_client_portal_user()
  AND invoice_id IN (
    SELECT id FROM invoices WHERE client_id = get_auth_client_id()
  )
);

-- Staff update payments
CREATE POLICY "payments_update_staff" ON payments
FOR UPDATE USING (
  NOT is_client_portal_user()
  AND get_auth_user_role() IN ('superadmin', 'admin', 'billing')
  AND organization_id = get_auth_organization_id()
);

-- Admins delete payments
CREATE POLICY "payments_delete_admin" ON payments
FOR DELETE USING (
  get_auth_user_role() IN ('superadmin', 'admin')
  AND organization_id = get_auth_organization_id()
);

-- ==========================================
-- INVOICE_ITEMS RLS
-- ==========================================

ALTER TABLE invoice_items ENABLE ROW LEVEL SECURITY;

-- Staff see invoice items for their org
CREATE POLICY "invoice_items_select_staff" ON invoice_items
FOR SELECT USING (
  NOT is_client_portal_user()
  AND invoice_id IN (
    SELECT id FROM invoices WHERE organization_id = get_auth_organization_id()
  )
);

-- Clients see their invoice items
CREATE POLICY "invoice_items_select_client" ON invoice_items
FOR SELECT USING (
  is_client_portal_user()
  AND invoice_id IN (
    SELECT id FROM invoices WHERE client_id = get_auth_client_id()
  )
);

-- Staff manage invoice items
CREATE POLICY "invoice_items_all_staff" ON invoice_items
FOR ALL USING (
  NOT is_client_portal_user()
  AND get_auth_user_role() IN ('superadmin', 'admin', 'billing')
  AND invoice_id IN (
    SELECT id FROM invoices WHERE organization_id = get_auth_organization_id()
  )
);

-- ==========================================
-- CPT_CODES RLS
-- ==========================================

ALTER TABLE cpt_codes ENABLE ROW LEVEL SECURITY;

-- All authenticated users can view CPT codes
CREATE POLICY "cpt_codes_select_all" ON cpt_codes
FOR SELECT USING (auth.uid() IS NOT NULL);

-- Only superadmins manage CPT codes
CREATE POLICY "cpt_codes_all_superadmin" ON cpt_codes
FOR ALL USING (get_auth_user_role() = 'superadmin');

-- ==========================================
-- ADDITIONAL TABLES RLS
-- ==========================================

-- Payment allocations
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'payment_allocations') THEN
    ALTER TABLE payment_allocations ENABLE ROW LEVEL SECURITY;
    
    EXECUTE 'CREATE POLICY "payment_allocations_select_staff" ON payment_allocations
    FOR SELECT USING (
      NOT is_client_portal_user()
      AND payment_id IN (
        SELECT id FROM payments WHERE organization_id = get_auth_organization_id()
      )
    )';
    
    EXECUTE 'CREATE POLICY "payment_allocations_all_staff" ON payment_allocations
    FOR ALL USING (
      NOT is_client_portal_user()
      AND get_auth_user_role() IN (''superadmin'', ''admin'', ''billing'')
      AND payment_id IN (
        SELECT id FROM payments WHERE organization_id = get_auth_organization_id()
      )
    )';
  END IF;
END $$;

-- Account credits
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'account_credits') THEN
    ALTER TABLE account_credits ENABLE ROW LEVEL SECURITY;
    
    EXECUTE 'CREATE POLICY "account_credits_select_staff" ON account_credits
    FOR SELECT USING (
      NOT is_client_portal_user()
      AND client_id IN (
        SELECT id FROM clients WHERE organization_id = get_auth_organization_id()
      )
    )';
    
    EXECUTE 'CREATE POLICY "account_credits_select_client" ON account_credits
    FOR SELECT USING (
      is_client_portal_user()
      AND client_id = get_auth_client_id()
    )';
    
    EXECUTE 'CREATE POLICY "account_credits_all_staff" ON account_credits
    FOR ALL USING (
      NOT is_client_portal_user()
      AND get_auth_user_role() IN (''superadmin'', ''admin'', ''billing'')
      AND client_id IN (
        SELECT id FROM clients WHERE organization_id = get_auth_organization_id()
      )
    )';
  END IF;
END $$;

-- Audit logs
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'audit_logs') THEN
    ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY;
    
    EXECUTE 'CREATE POLICY "audit_logs_select_admin" ON audit_logs
    FOR SELECT USING (
      get_auth_user_role() IN (''superadmin'', ''admin'')
      AND organization_id = get_auth_organization_id()
    )';
    
    -- Allow system to create audit logs
    EXECUTE 'CREATE POLICY "audit_logs_insert_all" ON audit_logs
    FOR INSERT WITH CHECK (true)';
  END IF;
END $$;

-- ==========================================
-- VERIFICATION
-- ==========================================

DO $$
DECLARE
  policy_count INTEGER;
  table_count INTEGER;
BEGIN
  -- Count policies created
  SELECT COUNT(*) INTO policy_count
  FROM pg_policies
  WHERE schemaname = 'public';
  
  -- Count tables with RLS enabled
  SELECT COUNT(*) INTO table_count
  FROM pg_tables t
  WHERE t.schemaname = 'public'
  AND t.rowsecurity = true;
  
  RAISE NOTICE 'RLS Configuration Complete';
  RAISE NOTICE '- Tables with RLS enabled: %', table_count;
  RAISE NOTICE '- Total policies created: %', policy_count;
  RAISE NOTICE '- Emergency policies removed';
  RAISE NOTICE '- Multi-tenant isolation active';
END $$;