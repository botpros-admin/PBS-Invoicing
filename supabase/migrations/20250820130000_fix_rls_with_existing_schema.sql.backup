-- ==========================================
-- Fix RLS Policies with Existing Schema
-- Date: 2025-08-20
-- Purpose: Apply proper multi-tenant RLS without conflicts
-- ==========================================

-- First disable the emergency policies
DO $$
BEGIN
  -- Drop emergency policies if they exist
  DROP POLICY IF EXISTS "Authenticated users can view invoices" ON invoices;
  DROP POLICY IF EXISTS "Authenticated users can manage invoices" ON invoices;
  DROP POLICY IF EXISTS "Authenticated users can view clients" ON clients;
  DROP POLICY IF EXISTS "Authenticated users can manage clients" ON clients;
  DROP POLICY IF EXISTS "Authenticated users can view invoice items" ON invoice_items;
  DROP POLICY IF EXISTS "Authenticated users can manage invoice items" ON invoice_items;
  DROP POLICY IF EXISTS "Authenticated users can view payments" ON payments;
  DROP POLICY IF EXISTS "Authenticated users can manage payments" ON payments;
  DROP POLICY IF EXISTS "Authenticated users can view payment allocations" ON payment_allocations;
  DROP POLICY IF EXISTS "Authenticated users can manage payment allocations" ON payment_allocations;
  DROP POLICY IF EXISTS "Authenticated users can view account credits" ON account_credits;
  DROP POLICY IF EXISTS "Authenticated users can manage account credits" ON account_credits;
  DROP POLICY IF EXISTS "Authenticated users can view audit logs" ON audit_logs;
  DROP POLICY IF EXISTS "System can create audit logs" ON audit_logs;
  DROP POLICY IF EXISTS "Authenticated users can view cpt codes" ON cpt_codes;
END $$;

-- ==========================================
-- HELPER FUNCTIONS FOR RLS (Safe versions)
-- ==========================================

-- Get current user's organization ID from users or client_users
CREATE OR REPLACE FUNCTION auth_organization_id()
RETURNS UUID AS $$
DECLARE
  org_id UUID;
BEGIN
  -- Check users table first
  SELECT organization_id INTO org_id
  FROM users
  WHERE auth_id = auth.uid();
  
  IF org_id IS NOT NULL THEN
    RETURN org_id;
  END IF;
  
  -- Check client_users table (get organization from client)
  SELECT c.organization_id INTO org_id
  FROM client_users cu
  JOIN clients c ON cu.client_id = c.id
  WHERE cu.auth_id = auth.uid();
  
  RETURN org_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Get current user's role from users table
CREATE OR REPLACE FUNCTION auth_user_role()
RETURNS TEXT AS $$
BEGIN
  RETURN (
    SELECT role
    FROM users
    WHERE auth_id = auth.uid()
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Check if current user is a client user
CREATE OR REPLACE FUNCTION is_client_user()
RETURNS BOOLEAN AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1
    FROM client_users
    WHERE auth_id = auth.uid()
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Get current user's client ID
CREATE OR REPLACE FUNCTION auth_client_id()
RETURNS UUID AS $$
BEGIN
  RETURN (
    SELECT client_id
    FROM client_users
    WHERE auth_id = auth.uid()
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- ==========================================
-- USERS TABLE RLS POLICIES
-- ==========================================

ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- Drop existing policies on users
DO $$
BEGIN
  DROP POLICY IF EXISTS "users_select_policy" ON users;
  DROP POLICY IF EXISTS "users_update_self_policy" ON users;
  DROP POLICY IF EXISTS "users_update_admin_policy" ON users;
  DROP POLICY IF EXISTS "Users can view organization members" ON users;
  DROP POLICY IF EXISTS "Users can update own profile" ON users;
END $$;

-- Users can see themselves
CREATE POLICY "users_view_self" ON users
FOR SELECT USING (auth_id = auth.uid());

-- Users can see others in their organization
CREATE POLICY "users_view_org" ON users
FOR SELECT USING (
  organization_id = auth_organization_id()
  AND auth_organization_id() IS NOT NULL
);

-- Users can update their own profile
CREATE POLICY "users_update_self" ON users
FOR UPDATE USING (auth_id = auth.uid())
WITH CHECK (auth_id = auth.uid() AND organization_id = auth_organization_id());

-- Admins can manage users in their organization
CREATE POLICY "users_admin_manage" ON users
FOR ALL USING (
  auth_user_role() IN ('superadmin', 'admin')
  AND organization_id = auth_organization_id()
)
WITH CHECK (
  auth_user_role() IN ('superadmin', 'admin')
  AND organization_id = auth_organization_id()
);

-- ==========================================
-- CLIENT_USERS TABLE RLS POLICIES
-- ==========================================

DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'client_users') THEN
    ALTER TABLE client_users ENABLE ROW LEVEL SECURITY;
    
    -- Drop existing policies
    DROP POLICY IF EXISTS "client_users_select_policy" ON client_users;
    DROP POLICY IF EXISTS "client_users_update_self_policy" ON client_users;
    
    -- Client users can see themselves
    CREATE POLICY "client_users_view_self" ON client_users
    FOR SELECT USING (auth_id = auth.uid());
    
    -- Staff can see client users for their organization's clients
    CREATE POLICY "client_users_view_staff" ON client_users
    FOR SELECT USING (
      NOT is_client_user()
      AND client_id IN (
        SELECT id FROM clients WHERE organization_id = auth_organization_id()
      )
    );
    
    -- Client users can update their own profile
    CREATE POLICY "client_users_update_self" ON client_users
    FOR UPDATE USING (auth_id = auth.uid())
    WITH CHECK (auth_id = auth.uid());
  END IF;
END $$;

-- ==========================================
-- INVOICES RLS POLICIES
-- ==========================================

ALTER TABLE invoices ENABLE ROW LEVEL SECURITY;

-- Drop existing policies
DO $$
BEGIN
  DROP POLICY IF EXISTS "invoices_select_policy" ON invoices;
  DROP POLICY IF EXISTS "invoices_insert_policy" ON invoices;
  DROP POLICY IF EXISTS "invoices_update_policy" ON invoices;
  DROP POLICY IF EXISTS "invoices_delete_policy" ON invoices;
END $$;

-- Staff can see all invoices in their organization
CREATE POLICY "invoices_view_staff" ON invoices
FOR SELECT USING (
  NOT is_client_user()
  AND organization_id = auth_organization_id()
);

-- Clients can see their own invoices
CREATE POLICY "invoices_view_client" ON invoices
FOR SELECT USING (
  is_client_user()
  AND client_id = auth_client_id()
);

-- Staff can create invoices for their organization
CREATE POLICY "invoices_create_staff" ON invoices
FOR INSERT WITH CHECK (
  NOT is_client_user()
  AND auth_user_role() IN ('superadmin', 'admin', 'billing')
  AND organization_id = auth_organization_id()
);

-- Staff can update invoices in their organization
CREATE POLICY "invoices_update_staff" ON invoices
FOR UPDATE USING (
  NOT is_client_user()
  AND auth_user_role() IN ('superadmin', 'admin', 'billing')
  AND organization_id = auth_organization_id()
)
WITH CHECK (organization_id = auth_organization_id());

-- Only admins can delete invoices
CREATE POLICY "invoices_delete_admin" ON invoices
FOR DELETE USING (
  auth_user_role() IN ('superadmin', 'admin')
  AND organization_id = auth_organization_id()
);

-- ==========================================
-- CLIENTS RLS POLICIES
-- ==========================================

ALTER TABLE clients ENABLE ROW LEVEL SECURITY;

-- Drop existing policies
DO $$
BEGIN
  DROP POLICY IF EXISTS "clients_select_policy" ON clients;
  DROP POLICY IF EXISTS "clients_insert_policy" ON clients;
  DROP POLICY IF EXISTS "clients_update_policy" ON clients;
  DROP POLICY IF EXISTS "clients_delete_policy" ON clients;
END $$;

-- Staff can see all clients in their organization
CREATE POLICY "clients_view_staff" ON clients
FOR SELECT USING (
  NOT is_client_user()
  AND organization_id = auth_organization_id()
);

-- Client users can see their own client record
CREATE POLICY "clients_view_self" ON clients
FOR SELECT USING (
  is_client_user()
  AND id = auth_client_id()
);

-- Only admins can create clients
CREATE POLICY "clients_create_admin" ON clients
FOR INSERT WITH CHECK (
  auth_user_role() IN ('superadmin', 'admin')
  AND organization_id = auth_organization_id()
);

-- Admins can update clients
CREATE POLICY "clients_update_admin" ON clients
FOR UPDATE USING (
  auth_user_role() IN ('superadmin', 'admin')
  AND organization_id = auth_organization_id()
)
WITH CHECK (organization_id = auth_organization_id());

-- Only superadmin can delete clients
CREATE POLICY "clients_delete_superadmin" ON clients
FOR DELETE USING (
  auth_user_role() = 'superadmin'
  AND organization_id = auth_organization_id()
);

-- ==========================================
-- PAYMENTS RLS POLICIES
-- ==========================================

ALTER TABLE payments ENABLE ROW LEVEL SECURITY;

-- Drop existing policies
DO $$
BEGIN
  DROP POLICY IF EXISTS "payments_select_policy" ON payments;
  DROP POLICY IF EXISTS "payments_insert_policy" ON payments;
  DROP POLICY IF EXISTS "payments_update_policy" ON payments;
  DROP POLICY IF EXISTS "payments_delete_policy" ON payments;
END $$;

-- Staff can see all payments in their organization
CREATE POLICY "payments_view_staff" ON payments
FOR SELECT USING (
  NOT is_client_user()
  AND organization_id = auth_organization_id()
);

-- Clients can see payments for their invoices
CREATE POLICY "payments_view_client" ON payments
FOR SELECT USING (
  is_client_user()
  AND invoice_id IN (
    SELECT id FROM invoices WHERE client_id = auth_client_id()
  )
);

-- Staff can create payments
CREATE POLICY "payments_create_staff" ON payments
FOR INSERT WITH CHECK (
  NOT is_client_user()
  AND auth_user_role() IN ('superadmin', 'admin', 'billing')
  AND organization_id = auth_organization_id()
);

-- Clients can create payments for their invoices (online payments)
CREATE POLICY "payments_create_client" ON payments
FOR INSERT WITH CHECK (
  is_client_user()
  AND invoice_id IN (
    SELECT id FROM invoices WHERE client_id = auth_client_id()
  )
);

-- Staff can update payments
CREATE POLICY "payments_update_staff" ON payments
FOR UPDATE USING (
  NOT is_client_user()
  AND auth_user_role() IN ('superadmin', 'admin', 'billing')
  AND organization_id = auth_organization_id()
)
WITH CHECK (organization_id = auth_organization_id());

-- Only admins can delete payments
CREATE POLICY "payments_delete_admin" ON payments
FOR DELETE USING (
  auth_user_role() IN ('superadmin', 'admin')
  AND organization_id = auth_organization_id()
);

-- ==========================================
-- INVOICE_ITEMS RLS POLICIES
-- ==========================================

ALTER TABLE invoice_items ENABLE ROW LEVEL SECURITY;

-- Staff can see invoice items for their organization's invoices
CREATE POLICY "invoice_items_view_staff" ON invoice_items
FOR SELECT USING (
  NOT is_client_user()
  AND invoice_id IN (
    SELECT id FROM invoices WHERE organization_id = auth_organization_id()
  )
);

-- Clients can see their invoice items
CREATE POLICY "invoice_items_view_client" ON invoice_items
FOR SELECT USING (
  is_client_user()
  AND invoice_id IN (
    SELECT id FROM invoices WHERE client_id = auth_client_id()
  )
);

-- Staff can manage invoice items
CREATE POLICY "invoice_items_manage_staff" ON invoice_items
FOR ALL USING (
  NOT is_client_user()
  AND auth_user_role() IN ('superadmin', 'admin', 'billing')
  AND invoice_id IN (
    SELECT id FROM invoices WHERE organization_id = auth_organization_id()
  )
)
WITH CHECK (
  invoice_id IN (
    SELECT id FROM invoices WHERE organization_id = auth_organization_id()
  )
);

-- ==========================================
-- PAYMENT_ALLOCATIONS RLS POLICIES
-- ==========================================

DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'payment_allocations') THEN
    ALTER TABLE payment_allocations ENABLE ROW LEVEL SECURITY;
    
    -- Staff can see payment allocations for their organization
    CREATE POLICY "payment_allocations_view_staff" ON payment_allocations
    FOR SELECT USING (
      NOT is_client_user()
      AND payment_id IN (
        SELECT id FROM payments WHERE organization_id = auth_organization_id()
      )
    );
    
    -- Staff can manage payment allocations
    CREATE POLICY "payment_allocations_manage_staff" ON payment_allocations
    FOR ALL USING (
      NOT is_client_user()
      AND auth_user_role() IN ('superadmin', 'admin', 'billing')
      AND payment_id IN (
        SELECT id FROM payments WHERE organization_id = auth_organization_id()
      )
    );
  END IF;
END $$;

-- ==========================================
-- ACCOUNT_CREDITS RLS POLICIES
-- ==========================================

DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'account_credits') THEN
    ALTER TABLE account_credits ENABLE ROW LEVEL SECURITY;
    
    -- Staff can see account credits for their organization
    CREATE POLICY "account_credits_view_staff" ON account_credits
    FOR SELECT USING (
      NOT is_client_user()
      AND client_id IN (
        SELECT id FROM clients WHERE organization_id = auth_organization_id()
      )
    );
    
    -- Clients can see their own credits
    CREATE POLICY "account_credits_view_client" ON account_credits
    FOR SELECT USING (
      is_client_user()
      AND client_id = auth_client_id()
    );
    
    -- Staff can manage credits
    CREATE POLICY "account_credits_manage_staff" ON account_credits
    FOR ALL USING (
      NOT is_client_user()
      AND auth_user_role() IN ('superadmin', 'admin', 'billing')
      AND client_id IN (
        SELECT id FROM clients WHERE organization_id = auth_organization_id()
      )
    );
  END IF;
END $$;

-- ==========================================
-- CPT_CODES RLS POLICIES (Reference data)
-- ==========================================

ALTER TABLE cpt_codes ENABLE ROW LEVEL SECURITY;

-- All authenticated users can view CPT codes
CREATE POLICY "cpt_codes_view_all" ON cpt_codes
FOR SELECT USING (auth.uid() IS NOT NULL);

-- Only superadmin can manage CPT codes
CREATE POLICY "cpt_codes_manage_superadmin" ON cpt_codes
FOR ALL USING (auth_user_role() = 'superadmin');

-- ==========================================
-- AUDIT_LOGS RLS POLICIES
-- ==========================================

DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'audit_logs') THEN
    ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY;
    
    -- Only admins can view audit logs for their organization
    CREATE POLICY "audit_logs_view_admin" ON audit_logs
    FOR SELECT USING (
      auth_user_role() IN ('superadmin', 'admin')
      AND organization_id = auth_organization_id()
    );
    
    -- System can create audit logs (using service role)
    CREATE POLICY "audit_logs_create_system" ON audit_logs
    FOR INSERT WITH CHECK (true);
  END IF;
END $$;

-- ==========================================
-- VERIFY POLICIES
-- ==========================================

DO $$
DECLARE
  policy_count INTEGER;
BEGIN
  SELECT COUNT(*) INTO policy_count
  FROM pg_policies
  WHERE schemaname = 'public';
  
  RAISE NOTICE 'RLS policies applied successfully. Total policies: %', policy_count;
  RAISE NOTICE 'Multi-tenant access control is now active.';
  RAISE NOTICE 'Emergency "allow all authenticated" policies have been replaced.';
END $$;