-- Migration: fix_rls_policies
-- Date: 2025-08-20
-- Description: This migration removes the permissive RLS policies and implements a secure, multi-tenant RLS system.

-- ========================================
-- STEP 1: DROP OLD PERMISSIVE POLICIES
-- ========================================

-- Drop policies from the emergency fix
DROP POLICY IF EXISTS "Authenticated users can view invoices" ON invoices;
DROP POLICY IF EXISTS "Authenticated users can manage invoices" ON invoices;
DROP POLICY IF EXISTS "Authenticated users can view clients" ON clients;
DROP POLICY IF EXISTS "Authenticated users can manage clients" ON clients;
DROP POLICY IF EXISTS "Authenticated users can view invoice items" ON invoice_items;
DROP POLICY IF EXISTS "Authenticated users can manage invoice items" ON invoice_items;
DROP POLICY IF EXISTS "Authenticated users can view payments" ON payments;
DROP POLICY IF EXISTS "Authenticated users can manage payments" ON payments;
DROP POLICY IF EXISTS "Authenticated users can view payment allocations" ON payment_allocations;
DROP POLICY IF EXISTS "Authenticated users can manage payment allocations" ON payment_allocations;
DROP POLICY IF EXISTS "Authenticated users can view account credits" ON account_credits;
DROP POLICY IF EXISTS "Authenticated users can manage account credits" ON account_credits;
DROP POLICY IF EXISTS "Authenticated users can view audit logs" ON audit_logs;
DROP POLICY IF EXISTS "System can create audit logs" ON audit_logs;
DROP POLICY IF EXISTS "Authenticated users can view cpt codes" ON cpt_codes;

-- ========================================
-- STEP 2: CREATE HELPER FUNCTIONS
-- ========================================

-- Get the organization_id for the current user
CREATE OR REPLACE FUNCTION get_my_organization_id()
RETURNS UUID AS $$
DECLARE
  org_id UUID;
BEGIN
  SELECT organization_id INTO org_id FROM public.user_profiles WHERE user_id = auth.uid() AND is_primary = true;
  RETURN org_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Get the role for the current user
CREATE OR REPLACE FUNCTION get_my_role()
RETURNS TEXT AS $$
DECLARE
  user_role TEXT;
BEGIN
  SELECT role INTO user_role FROM public.user_profiles WHERE user_id = auth.uid() AND is_primary = true;
  RETURN user_role;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ========================================
-- STEP 3: CREATE NEW RLS POLICIES
-- ========================================

-- Enable RLS on all tables if not already enabled
ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoices ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoice_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.payments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.payment_allocations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.account_credits ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.disputes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.cpt_codes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.pricing_schedules ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.pricing_rules ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.import_queues ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.audit_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;

-- ORGANIZATIONS
CREATE POLICY "Users can view their own organization" ON public.organizations
  FOR SELECT USING (id = get_my_organization_id());

-- USER_PROFILES
CREATE POLICY "Users can view their own profile" ON public.user_profiles
  FOR SELECT USING (user_id = auth.uid());
CREATE POLICY "Admins can view all profiles in their org" ON public.user_profiles
  FOR SELECT USING (organization_id = get_my_organization_id() AND get_my_role() = 'admin');
CREATE POLICY "Users can update their own profile" ON public.user_profiles
  FOR UPDATE USING (user_id = auth.uid());
CREATE POLICY "Admins can manage profiles in their org" ON public.user_profiles
  FOR ALL USING (organization_id = get_my_organization_id() AND get_my_role() = 'admin');

-- CLIENTS
CREATE POLICY "Users can manage clients in their own org" ON public.clients
  FOR ALL USING (organization_id = get_my_organization_id());

-- INVOICES
CREATE POLICY "Users can manage invoices in their own org" ON public.invoices
  FOR ALL USING (organization_id = get_my_organization_id());

-- INVOICE_ITEMS
CREATE POLICY "Users can manage invoice_items in their own org" ON public.invoice_items
  FOR ALL USING (organization_id = get_my_organization_id());

-- PAYMENTS
CREATE POLICY "Users can view payments for their clients" ON public.payments
  FOR SELECT USING (client_id IN (SELECT id FROM clients WHERE organization_id = get_my_organization_id()));
CREATE POLICY "Admins and billing can manage payments" ON public.payments
  FOR ALL USING (get_my_role() IN ('admin', 'billing')) WITH CHECK (client_id IN (SELECT id FROM clients WHERE organization_id = get_my_organization_id()));

-- PAYMENT_ALLOCATIONS
CREATE POLICY "Users can view allocations for their invoices" ON public.payment_allocations
  FOR SELECT USING (invoice_id IN (SELECT id FROM invoices WHERE organization_id = get_my_organization_id()));
CREATE POLICY "Admins and billing can manage allocations" ON public.payment_allocations
  FOR ALL USING (get_my_role() IN ('admin', 'billing')) WITH CHECK (invoice_id IN (SELECT id FROM invoices WHERE organization_id = get_my_organization_id()));

-- CPT_CODES (Reference data, readable by all in org)
CREATE POLICY "Users can view cpt_codes in their own org" ON public.cpt_codes
  FOR SELECT USING (organization_id = get_my_organization_id());
CREATE POLICY "Admins can manage cpt_codes" ON public.cpt_codes
  FOR ALL USING (organization_id = get_my_organization_id() AND get_my_role() = 'admin');

-- ROLES (Reference data, readable by all in org)
CREATE POLICY "Users can view roles" ON public.roles
  FOR SELECT USING (true);
CREATE POLICY "Admins can manage roles" ON public.roles
  FOR ALL USING (get_my_role() = 'admin');

-- USER_ROLES
CREATE POLICY "Users can view their own user_roles" ON public.user_roles
  FOR SELECT USING (user_id = auth.uid());
CREATE POLICY "Admins can manage user_roles in their org" ON public.user_roles
  FOR ALL USING (organization_id = get_my_organization_id() AND get_my_role() = 'admin');

-- AUDIT_LOGS
CREATE POLICY "Admins can view audit logs" ON public.audit_logs
  FOR SELECT USING (organization_id = get_my_organization_id() AND get_my_role() = 'admin');

-- ========================================
-- STEP 4: GRANT USAGE ON FUNCTIONS
-- ========================================
GRANT EXECUTE ON FUNCTION public.get_my_organization_id() TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_my_role() TO authenticated;

-- Log successful policy creation
DO $$
BEGIN
    RAISE NOTICE 'New RLS policies created successfully. Data is now protected with multi-tenancy.';
END $$;
